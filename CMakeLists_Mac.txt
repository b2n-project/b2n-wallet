cmake_minimum_required(VERSION 2.8.6)
include(bitcoin2network.cmake)

project(${CN_PROJECT_NAME})

execute_process(COMMAND git log -1 --pretty=format:%h
WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
OUTPUT_VARIABLE GIT_REVISION)

set(CRYPTONOTE_LIB cryptonote)

include_directories(${CMAKE_BINARY_DIR}
  src
  include
  bitcoin2network/external
  bitcoin2network/external/rocksdb/include/
  bitcoin2network/include
  bitcoin2network/src
)

find_package(Qt5Gui REQUIRED)
find_package(Qt5Widgets REQUIRED)
find_package(Qt5Network REQUIRED)
find_package(Qt5DBus REQUIRED)

include_directories(${Qt5DBus_INCLUDE_DIRS} bitcoin2network/external/rocksdb/include/ include src external "${CMAKE_CURRENT_BINARY_DIR}/version")

if(STATIC)
  set(Boost_USE_STATIC_LIBS ON)
  set(Boost_USE_STATIC_RUNTIME ON)
endif()

find_package(Boost 1.58 REQUIRED COMPONENTS date_time filesystem program_options regex serialization system thread chrono)
if ((${Boost_MAJOR_VERSION} EQUAL 1) AND (${Boost_MINOR_VERSION} EQUAL 54))
  message(SEND_ERROR "Boost version 1.58 is unsupported, more details are available here http://goo.gl/RrCFmA")
endif ()

include_directories(${Boost_INCLUDE_DIRS})
link_directories(${Boost_LIBRARY_DIRS})

set(VERSION "")
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/miniupnpcstrings.h.in "miniupnpcstrings.h")
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/bitcoin2network/src/version.h.in "version.h")
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/b2nConfig.h.in "b2nConfig.h")

add_definitions(-DGIT_REVISION="${GIT_REVISION}")

set(CMAKE_AUTOMOC ON)
set_property(SOURCE qrc_resources.cpp PROPERTY SKIP_AUTOMOC ON)

file(GLOB_RECURSE CRYPTONOTE_SOURCES
  bitcoin2network/external/miniupnpc/connecthostport.c
  bitcoin2network/external/miniupnpc/igd_desc_parse.c
  bitcoin2network/external/miniupnpc/minisoap.c
  bitcoin2network/external/miniupnpc/miniupnpc.c
  bitcoin2network/external/miniupnpc/miniwget.c
  bitcoin2network/external/miniupnpc/minixml.c
  bitcoin2network/external/miniupnpc/portlistingparse.c
  bitcoin2network/external/miniupnpc/receivedata.c
  bitcoin2network/external/miniupnpc/upnpcommands.c
  bitcoin2network/external/miniupnpc/upnpreplyparse.c
  bitcoin2network/src/BlockchainExplorer/BlockchainExplorer.cpp
  bitcoin2network/src/BlockchainExplorer/BlockchainExplorerErrors.cpp
  bitcoin2network/src/Common/Base58.cpp
  bitcoin2network/src/Common/CommandLine.cpp
  bitcoin2network/src/Common/Util.cpp
  bitcoin2network/src/Common/StringTools.cpp
  bitcoin2network/src/Common/JsonValue.cpp
  bitcoin2network/src/Common/ConsoleTools.cpp
  bitcoin2network/src/Common/MemoryInputStream.cpp
  bitcoin2network/src/Common/PathTools.cpp
  bitcoin2network/src/Common/StdInputStream.cpp
  bitcoin2network/src/Common/StdOutputStream.cpp
  bitcoin2network/src/Common/StreamTools.cpp
  bitcoin2network/src/Common/StringOutputStream.cpp
  bitcoin2network/src/Common/StringView.cpp
  bitcoin2network/src/Common/VectorOutputStream.cpp
  bitcoin2network/src/Common/ScopeExit.cpp
  bitcoin2network/src/crypto/blake256.c
  bitcoin2network/src/crypto/chacha8.c
  bitcoin2network/src/crypto/crypto-ops-data.c
  bitcoin2network/src/crypto/crypto-ops.c
  bitcoin2network/src/crypto/crypto.cpp
  bitcoin2network/src/crypto/groestl.c
  bitcoin2network/src/crypto/hash-extra-blake.c
  bitcoin2network/src/crypto/hash-extra-groestl.c
  bitcoin2network/src/crypto/hash-extra-jh.c
  bitcoin2network/src/crypto/hash-extra-skein.c
  bitcoin2network/src/crypto/hash.c
  bitcoin2network/src/crypto/jh.c
  bitcoin2network/src/crypto/keccak.c
  bitcoin2network/src/crypto/oaes_lib.c
  bitcoin2network/src/crypto/random.c
  bitcoin2network/src/crypto/skein.c
  bitcoin2network/src/crypto/slow-hash.c
  bitcoin2network/src/crypto/slow-hash.cpp
  bitcoin2network/src/crypto/tree-hash.c
  bitcoin2network/src/CryptoNoteCore/*.cpp
  bitcoin2network/src/CryptoNoteProtocol/*.cpp
  bitcoin2network/src/Daemon/*.cpp
  bitcoin2network/src/HTTP/*.cpp
  bitcoin2network/src/InProcessNode/InProcessNode.cpp
  bitcoin2network/src/InProcessNode/InProcessNodeErrors.cpp
  bitcoin2network/src/Logging/*.cpp
  bitcoin2network/src/NodeRpcProxy/NodeErrors.cpp
  bitcoin2network/src/NodeRpcProxy/NodeRpcProxy.cpp
  bitcoin2network/src/P2p/*.cpp
  bitcoin2network/src/Rpc/*.cpp
  bitcoin2network/src/Serialization/*.cpp
  bitcoin2network/src/Transfers/BlockchainSynchronizer.cpp
  bitcoin2network/src/Transfers/SynchronizationState.cpp
  bitcoin2network/src/Transfers/TransfersConsumer.cpp
  bitcoin2network/src/Transfers/TransfersContainer.cpp
  bitcoin2network/src/Transfers/TransfersSubscription.cpp
  bitcoin2network/src/Transfers/TransfersSynchronizer.cpp
  bitcoin2network/src/Wallet/*.cpp
  bitcoin2network/src/WalletLegacy/KeysStorage.cpp
  bitcoin2network/src/WalletLegacy/WalletLegacy.cpp
  bitcoin2network/src/WalletLegacy/WalletHelper.cpp
  bitcoin2network/src/WalletLegacy/WalletLegacySerializer.cpp
  bitcoin2network/src/WalletLegacy/WalletLegacySerialization.cpp
  bitcoin2network/src/WalletLegacy/WalletTransactionSender.cpp
  bitcoin2network/src/WalletLegacy/WalletUnconfirmedTransactions.cpp
  bitcoin2network/src/WalletLegacy/WalletUserTransactionsCache.cpp
  bitcoin2network/src/System/ContextGroup.cpp
  bitcoin2network/src/System/Event.cpp
  bitcoin2network/src/System/EventLock.cpp
  bitcoin2network/src/System/InterruptedException.cpp
  bitcoin2network/src/System/Ipv4Address.cpp
  bitcoin2network/src/System/TcpStream.cpp
  bitcoin2network/src/JsonRpcServer/*.cpp
  bitcoin2network/src/PaymentGate/*.cpp
  bitcoin2network/src/PaymentGateService/*.cpp
  bitcoin2network/src/Miner/*.cpp
)

file(GLOB_RECURSE SOURCES src/*.cpp)
file(GLOB_RECURSE HEADERS src/*.h)
file(GLOB_RECURSE FORMS src/gui/ui/*.ui)

if(MSVC)
  include_directories(Platform/Windows)
  set(SOURCES ${SOURCES} ${CMAKE_SOURCE_DIR}/Platform/Windows/ApplicationEventHandler.cpp)
elseif(APPLE)
  include_directories(Platform/OSX)
  include_directories(Platform/Posix)
  set(SOURCES ${SOURCES} ${CMAKE_SOURCE_DIR}/Platform/OSX/ApplicationEventHandler.mm)
  set(SOURCES ${SOURCES} ${CMAKE_SOURCE_DIR}/Platform/OSX/NotificationMonitor.mm)

  set(SOURCES ${SOURCES} ${CMAKE_SOURCE_DIR}/Platform/Posix/System/MemoryMappedFile.cpp)
else()
  include_directories(Platform/Linux)
  include_directories(Platform/Posix)
  set(SOURCES ${SOURCES} ${CMAKE_SOURCE_DIR}/Platform/Linux/ApplicationEventHandler.cpp)
  set(SOURCES ${SOURCES} ${CMAKE_SOURCE_DIR}/Platform/Posix/System/MemoryMappedFile.cpp)
endif()


set(QRC src/resources.qrc)

qt5_wrap_ui(UIS ${FORMS})
qt5_add_resources(RCC ${QRC})

if (WIN32)
  if (NOT MSVC)
    message(FATAL_ERROR "Only MSVC is supported on this platform")
  endif ()

  set(STATIC ${MSVC} CACHE BOOL "Link libraries statically")

  if(STATIC)
    foreach(VAR CMAKE_C_FLAGS_DEBUG CMAKE_CXX_FLAGS_DEBUG CMAKE_C_FLAGS_RELWITHDEBINFO CMAKE_CXX_FLAGS_RELWITHDEBINFO CMAKE_C_FLAGS_RELEASE CMAKE_CXX_FLAGS_RELEASE)
      string(REPLACE "/MD" "/MT" ${VAR} "${${VAR}}")
    endforeach()
  endif()

  add_definitions(/D_CRT_SECURE_NO_WARNINGS /D_WIN32_WINNT=0x0600 /DSTATICLIB)
  include_directories(bitcoin2network/src/Platform/msc)
  link_directories(bitcoin2network/external/rocksdb)

  set(PLATFORM_DIR Windows)
  set(BUILD_PLATFORM WIN32)
  set(BUILD_RESOURCES src/b2nwallet.rc)
  set(QTMAIN Qt5::WinMain)

elseif (UNIX)

  add_custom_target(
     rocksdb
     COMMAND make static_lib -Wno-undef -Wno-unused-result -Wno-unused-value
     WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/bitcoin2network/external/rocksdb
  )
  add_library(rocksdblib STATIC IMPORTED GLOBAL)
  set_target_properties(rocksdblib PROPERTIES IMPORTED_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/bitcoin2network/external/rocksdb/librocksdb.a)
  add_dependencies(rocksdblib rocksdb)

  set(CRYPTONOTE_SOURCES ${CRYPTONOTE_SOURCES} bitcoin2network/external/miniupnpc/minissdpc.c)

  if (APPLE)
    enable_language(ASM)
    file(GLOB_RECURSE OBJC_SOURCES src/*.mm)
    set(SOURCES ${SOURCES} ${OBJC_SOURCES})
    set(PLATFORM_DIR OSX)
    set(MACOSX_BUNDLE_INFO_STRING "Cryptonote GUI wallet")
    set(MACOSX_BUNDLE_LONG_VERSION_STRING "${VERSION_VERSION}.${VERSION_MINOR}.${VERSION_PATCH}")
    set(MACOSX_BUNDLE_BUNDLE_NAME B2Nwallet)
    set(MACOSX_BUNDLE_SHORT_VERSION_STRING "${VERSION_VERSION}.${VERSION_MINOR}.${VERSION_PATCH}")
    set(MACOSX_BUNDLE_BUNDLE_VERSION "$${VERSION_VERSION}.${VERSION_MINOR}.${VERSION_PATCH}")

    find_package(Qt5PrintSupport REQUIRED)

    include_directories(/usr/include/malloc)

    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -maes  -stdlib=libc++")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c11 -maes -D_DARWIN_C_SOURCE")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -framework Cocoa -framework OpenGL -framework CoreFoundation -framework Carbon -framework IOKit -L/usr/lib")

    set(MACOSX_BUNDLE_ICON_FILE bitcoin2network.icns)
    set(APPLICATION_ICON src/images/bitcoin2network.icns)
    set_source_files_properties(${APPLICATION_ICON} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources")

    set(BUILD_PLATFORM MACOSX_BUNDLE)
    set(BUILD_RESOURCES ${APPLICATION_ICON})

    GET_TARGET_PROPERTY(QT_LIB_DIR "${Qt5Widgets_LIBRARIES}" LOCATION)
    GET_FILENAME_COMPONENT(QT_LIB_DIR "${QT_LIB_DIR}" PATH)

  else(APPLE)

    set(PLATFORM_DIR Linux)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -maes -std=c++14")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -maes ")
  endif (APPLE)
endif ()

include_directories(bitcoin2network/src/Platform/${PLATFORM_DIR})
file(GLOB PLATFORM_SOURCES bitcoin2network/src/Platform/${PLATFORM_DIR}/System/*)
set(CRYPTONOTE_SOURCES ${CRYPTONOTE_SOURCES} ${PLATFORM_SOURCES} ${CRYPTONOTE_PLATFORM})

add_library(${CRYPTONOTE_LIB} STATIC ${CRYPTONOTE_SOURCES})
set_target_properties(${CRYPTONOTE_LIB} PROPERTIES COMPILE_DEFINITIONS _GNU_SOURCE)
target_link_libraries(${CRYPTONOTE_LIB} ${Boost_LIBRARIES} ${Qt5DBus_LIBRARIES} rocksdblib)

add_executable(${PROJECT_NAME} ${BUILD_PLATFORM} ${BUILD_RESOURCES} ${SOURCES} ${HEADERS} ${UIS} ${RCC})

set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_DEFINITIONS _GNU_SOURCE)
target_link_libraries(${PROJECT_NAME} ${Boost_LIBRARIES} ${QTMAIN} ${CRYPTONOTE_LIB} ${Qt5DBus_LIBRARIES} rocksdblib)

if (APPLE)
  qt5_use_modules(${PROJECT_NAME} PrintSupport)
elseif (UNIX)
  target_link_libraries(${PROJECT_NAME} -lpthread)
elseif (WIN32)
  target_link_libraries(${PROJECT_NAME} Imm32 Iphlpapi Winmm UxTheme d3d9 dxguid Rpcrt4 Wtsapi32 Dwmapi "${_qt5Widgets_install_prefix}/lib/qtharfbuzz.lib" "${_qt5Widgets_install_prefix}/lib/qtlibpng.lib" "${_qt5Widgets_install_prefix}/lib/qtpcre.lib" "${_qt5Widgets_install_prefix}/lib/Qt5EventDispatcherSupport.lib" "${_qt5Widgets_install_prefix}/lib/Qt5OpenGL.lib" "${_qt5Widgets_install_prefix}/lib/Qt5AccessibilitySupport.lib" "${_qt5Widgets_install_prefix}/lib/Qt5ThemeSupport.lib" "${_qt5Widgets_install_prefix}/lib/libGLESv2.lib" "${_qt5Widgets_install_prefix}/lib/libEGL.lib" "${_qt5Widgets_install_prefix}/lib/qtfreetype.lib" "${_qt5Widgets_install_prefix}/lib/Qt5FontDatabaseSupport.lib" "${_qt5Widgets_install_prefix}/lib/preprocessor.lib" "${_qt5Widgets_install_prefix}/lib/translator.lib" "${_qt5Widgets_install_prefix}/plugins/platforms/qwindows.lib")
endif (APPLE)

qt5_use_modules(${PROJECT_NAME} Widgets Gui Network)

